class Solution
{
	public:
	//Function to find number of strongly connected components in the graph.
	void dfs(int node,stack<int> &st,vector<int> &vis,vector<int>adj[]){
	    vis[node]=1;
	    for(auto it: adj[node]){
	        if(!vis[it]){
	            dfs(it,st,vis,adj);
	        }
	    }
		st.push(node);
    }
	void revdfs(int node,vector<int> &vis,vector<int> t[]){
	    vis[node]=1;
	    for(auto it: t[node]){
	        if(!vis[it]){
	            revdfs(it,vis,t);
	        }
	    }
	}
    int kosaraju(int V, vector<int> adj[])
    {
        int count=0;
        stack<int> st;
        vector<int> vis(V,0);
        for(int i=0;i<V;i++){
            if(!vis[i]){
                dfs(i,st,vis,adj);
            }
        }
        vector<int> t[V];
        for(int i=0;i<V;i++){
            vis[i]=0;
            for(auto it:adj[i]){
                t[it].push_back(i);
            }
        }
        while(!st.empty()){
            int node =st.top();
            st.pop();
            if(!vis[node]){
                count++;
                revdfs(node,vis,t);
            }
            
        }
        return count;
    }
};
