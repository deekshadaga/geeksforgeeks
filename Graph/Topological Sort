DFS -->

class Solution
{
	public:
	//Function to return list containing vertices in Topological order.
	void topological(int node,vector<int> adj[],vector<int> &vis,stack<int> & st){
	    vis[node]=1;
	    for(auto itr:adj[node]){
	        if(!vis[itr]){
	            topological(itr,adj,vis,st);
	        }
	    }
	    st.push(node);
	}
	vector<int> topoSort(int V, vector<int> adj[]) 
	{
	    vector<int> vis(V+1,0);
	    stack<int> st;
	    for(int i=0;i<V;i++){
	        if(!vis[i]){
	            topological(i,adj,vis,st);
	        }
	    }
	    vector<int> ans;
	    while(!st.empty()){
	        ans.push_back(st.top());
	        st.pop();
	    }
	    return ans;
	}
};


BFS --> (Using Kahn's Algo)

class Solution
{
	public:
	//Function to return list containing vertices in Topological order.
	void topological(int node,vector<int> adj[],vector<int> &vis,stack<int> & st){
	    vis[node]=1;
	    for(auto itr:adj[node]){
	        if(!vis[itr]){
	            topological(itr,adj,vis,st);
	        }
	    }
	    st.push(node);
	}
	vector<int> topoSort(int V, vector<int> adj[]) 
	{
	    vector<int> vis(V+1,0);
	    stack<int> st;
	    for(int i=0;i<V;i++){
	        if(!vis[i]){
	            topological(i,adj,vis,st);
	        }
	    }
	    vector<int> ans;
	    while(!st.empty()){
	        ans.push_back(st.top());
	        st.pop();
	    }
	    return ans;
	}
};


