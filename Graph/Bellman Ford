To check for negative cycle -->
---------------------------


class Solution {
public:
	int isNegativeWeightCycle(int n, vector<vector<int>>edges){
	    vector<int> dist(n,1e6);
	    dist[0]=0;
	    for(int i=0;i<n-1;i++){
	        for(auto it: edges){
	            if(dist[it[0]]+it[2]<dist[it[1]]){
	                dist[it[1]]=dist[it[0]]+it[2];
	            }
	        }
	        
	    }
	    for(auto it: edges){
	       if(dist[it[0]]+it[2]<dist[it[1]]){
	            return 1;
	       }
	   }
	   return 0;
	}
};


To get Shortest distances -->
-------------------------

class Solution{
	public:
	/*  Function to implement Dijkstra
    *   adj: vector of vectors which represents the graph
    *   S: source vertex to start traversing graph with
    *   V: number of vertices
    */
    vector <int> bellman_ford(int V, vector<vector<int>> adj, int S) {
	    vector<int> dist(V,100000000);
	    dist[S]=0;
	    for(int i=0;i<V-1;i++){
	        for(auto it: adj){
	            if(dist[it[0]]+it[2]<dist[it[1]]){
	                dist[it[1]]=dist[it[0]]+it[2];
	            }
	        }
	    }
	    return dist;
    }
};

