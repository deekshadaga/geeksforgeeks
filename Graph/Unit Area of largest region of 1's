class Solution
{
    public:
    int dfs(int r,int c,int n, int m,vector<vector<int>>& grid,vector<vector<int>>& vis){
        vis[r][c] = 1;
        vector<int> dr{0,0,1,-1,1,-1,-1,1};
        vector<int> dc{1,-1,0,0,1,-1,1,-1};
        int count =1;
        for(int i=0;i<8;i++){
            int nr = r+dr[i];
            int nc = c+dc[i];
            if(nr>=0 && nr<n && nc>=0 && nc<m && grid[nr][nc] == 1 && vis[nr][nc] == 0){
                count += dfs(nr,nc,n,m,grid,vis);
            }
        }
        return count;
    }
    int findMaxArea(vector<vector<int>>& grid) {
        int n=grid.size();
        int m=grid[0].size();
        vector<vector<int>> vis(n,vector<int>(m,0));
        int maxRegion =0;
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                if(grid[i][j] == 1 && vis[i][j]==0){
                    maxRegion = max (maxRegion,dfs(i,j,n,m,grid,vis));
                }
            }
        }
        return maxRegion;
    }
};
