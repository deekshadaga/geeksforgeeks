class Solution {
  private:
    int partition(vector<int> &arr, int low, int high){
        int pivot = arr[high];
        int i = low;
        for(int j=low;j<high;j++){
            if(arr[j]<=pivot){
                swap(arr[i],arr[j]);
                i++;
            }
        }
        swap(arr[i],arr[high]);
        return i;
    }
    int quickSelect(vector<int> &arr,int low,int high, int k){
        if(low<=high){
            int pos = partition(arr,low,high);
            if(pos == k-1){
                return arr[pos];
            }
            else if(pos > k-1){
                return quickSelect(arr,low,pos-1,k);
            }
            else{
                return quickSelect(arr,pos+1,high,k);
            }
        }
        return -1;
    }
  public:
    // arr : given array
    // k : find kth smallest element and return using this function
    int kthSmallest(vector<int> &arr, int k) {
        return quickSelect(arr,0,arr.size()-1,k);
    }
};
