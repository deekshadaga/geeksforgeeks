class Solution {
  public:
  void dfs(int node,int parent, vector<int>& vis, vector<int>& tin, vector<int>& low, int timer, vector<int> adj[],vector<int>&isArticulate){
        vis[node]=1;
        tin[node] = low[node] = timer++;
        int child=0;
        for(auto it: adj[node]){
            if(it == parent)
                continue;
            if(!vis[it]){
                dfs(it,node,vis,tin,low,timer,adj,isArticulate);
                low[node] = min(low[node],low[it]);
                if(low[it] >= tin[node] && parent!=-1){
                        isArticulate[node]=1;
                }
                child++;
            }
            else{
                low[node] = min(low[node],tin[it]);
            }
        }
        if(parent==-1 && child>1){
            isArticulate[node]=1;
        }
    }
    vector<int> articulationPoints(int V, vector<int>adj[]) {
        vector<int> tin(V,-1);
        vector<int> low(V,-1);
        vector<int> vis(V,0);
        vector<int> isArticulate(V,0);
        vector<int> ans;
        for(int i=0;i<V;i++){
            if(!vis[i]){
               dfs(i,-1,vis,tin,low,0,adj,isArticulate);
            }
        }
        for(int i=0;i<V;i++){
            if(isArticulate[i]==1) 
                ans.push_back(i);
        }
        if(ans.size()==0){
            ans.push_back(-1);
        }
        return ans;
    }
};
