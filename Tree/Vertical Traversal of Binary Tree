class Solution
{
    public:
    //Function to find the vertical order traversal of Binary Tree.
    vector<int> verticalOrder(Node *root)
    {
        vector<int> res;
        map<int,vector<int>> m;
        int h=0;
        queue <pair<Node*,int>> q;
        q.push(make_pair(root,h));
        while(!q.empty()){
            pair<Node*,int> t=q.front();
            q.pop();
            h=t.second;
            Node* node=t.first;
            m[h].push_back(node->data);
            if(node->left) q.push(make_pair(node->left,h-1));
            if(node->right) q.push(make_pair(node->right,h+1));
        }
        map<int,vector<int>> :: iterator it;
        for(auto it: m){
            for(auto itr:it.second){
                res.push_back(itr);
            }
        }
        return res;
    }
};




vector<int> verticalOrder(Node *root)
{
    vector<int> res;
    map<int,vector<int>> m;
    int h=0;
    queue <pair<Node*,int>> q;
    q.push(make_pair(root,h));
    while(!q.empty()){
        pair<Node*,int> t=q.front();
        q.pop();
        h=t.second;
        Node* node=t.first;
        m[h].push_back(node->data);
        if(node->left) q.push(make_pair(node->left,h-1));
        if(node->right) q.push(make_pair(node->right,h+1));
    }
    map<int,vector<int>> :: iterator it;
    for(it=m.begin();it!=m.end();it++){
        for(int i=0;i<it->second.size();i++){
            res.push_back(it->second[i]);
        }
    }
    return res;
}

