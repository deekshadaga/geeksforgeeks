1. RECURSION

class Solution
{
    public:
    //Function to find the length of longest common subsequence in two strings.
    int lcs(int x, int y, string s1, string s2)
    {
        if(x==0 || y==0) return 0;
        if(s1[x-1]==s2[y-1]) return 1+lcs(x-1,y-1,s1,s2);
        return max(lcs(x-1,y,s1,s2),lcs(x,y-1,s1,s2));
    }
};

2.MEMOIZATION / BOTTOM UP DP

int static t[1001][1001]; // as constraint is 1000

class Solution
{
    public:
    //Function to find the length of longest common subsequence in two strings.
    int fun(int x, int y, string s1, string s2){
        if(x==0 || y==0) return 0;
        if(t[x][y]!=-1) return t[x][y];
        if(s1[x-1]==s2[y-1]) return t[x][y]=1+lcs(x-1,y-1,s1,s2);
        return t[x][y]=max(lcs(x-1,y,s1,s2),lcs(x,y-1,s1,s2));
    }
    int lcs(int x, int y, string s1, string s2)
    {
        memset(t,-1,sizeof(t));
        return fun(x,y,s1,s2);
    }
};

3.TOP-DOWN DP

class Solution
{
    public:
    //Function to find the length of longest common subsequence in two strings.
    int lcs(int x, int y, string s1, string s2)
    {
        int t[x+1][y+1];
        for(int i=0;i<=x;i++){
            for(int j=0;j<=y;j++){
                if(i==0 || j==0) t[i][j] = 0;
            }
        }
        for(int i=1;i<=x;i++){
            for(int j=1;j<=y;j++){
                if(s1[i-1]==s2[j-1]) t[i][j]=1+t[i-1][j-1];
                else t[i][j]=max(t[i-1][j],t[i][j-1]);            
            }
        }
        return t[x][y];
    }
};
