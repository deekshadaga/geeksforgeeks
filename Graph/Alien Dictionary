class Solution{
    public:
    void dfs(int src,vector<int> adj[],vector<bool> &vis,stack<int> &s)
    {
        vis[src]=true;
        for(auto node:adj[src])
        {
            if(!vis[node])
            dfs(node,adj,vis,s);
        }
        s.push(src);
    }
    string findOrder(string dict[], int N, int K) {
        //code here
        vector<int> mp[K];
        for(int i=0;i<N-1;i++)
        {
            int minlen=min(dict[i].size(),dict[i+1].size());
            for(int j=0;j<minlen;j++)
            {
                if(dict[i][j]!=dict[i+1][j])
                {
                    mp[dict[i][j]-'a'].push_back(dict[i+1][j]-'a');
                    break;
                }
            }
        }
        stack<int> s;
        vector<bool> vis(K,false);
        for(int i=0;i<K;i++)
        {
            if(!vis[i])
            dfs(i,mp,vis,s);
        }
        string ans="";
        while(!s.empty())
        {
            int x=s.top();
            s.pop();
            char ch=x+'a';
            ans.push_back(ch);
        }
        return ans;
    }
};
