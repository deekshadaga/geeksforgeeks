class Solution {
  private:
    void merge(int l, int mid,int h,vector<pair<int,int>> &a,vector<int> &ans){
        vector<pair<int,int>>temp;
        int i=l,j=mid+1,len=h-l+1;
        while(i<=mid && j<=h){
            if(a[i].first < a[j].first){
                temp.push_back(a[i]);
                ans[a[i].second] +=(h-j+1);
                i++;
            }
            else{
                temp.push_back(a[j]);
                j++;
            }
        }
        while(i<=mid)
        {
            temp.push_back(a[i]);
            ans[a[i].second]+=(h-j+1);
            i++;
        }
        while(j<=h)
        {
            temp.push_back(a[j]);
            j++;
        }
        i=l;
        int k = 0;
        while(k<len){
            a[k+l] = temp[k];
            k++;
        }
    }
    void mergeSort(int l, int h,vector<pair<int,int>> &a,vector<int> &ans){
        if(l>=h) return;
        int mid = (l+h)/2;
        mergeSort(l,mid,a,ans);
        mergeSort(mid+1,h,a,ans);
        merge(l,mid,h,a,ans);
    }
  public:
    vector<int> findSurpasser(vector<int>& arr) {
        int n = arr.size();
        vector<int> ans(n);
        vector<pair<int,int>> a;
        for(int i=0;i<n;i++){
            a.push_back({arr[i],i});
        }
        mergeSort(0,n-1,a,ans);
        return ans;
        
    }
