### RECURSION ###

class Solution {
  public:
  
    long long int countPaths(int r,int c){
        if(r==0 && c==0) return 1;
        if(r<0 || c<0) return 0;
        return countPaths(r-1,c) + countPaths(r,c-1);
    }
    
    long long int numberOfPaths(int m, int n){
        return countPaths(m-1,n-1);
    }
};

### MEMOIZATION ###

class Solution {
  public:
  
    long long int countPaths(int r,int c,vector<vector<int>> &dp){
        if(r==0 && c==0) return 1;
        if(r<0 || c<0) return 0;
        if(dp[r][c]!=-1) return dp[r][c];
        return dp[r][c]=(countPaths(r-1,c,dp) + countPaths(r,c-1,dp))%1000000007;
    }
    
    long long int numberOfPaths(int m, int n){
        vector<vector<int>> dp(m,vector<int>(n,-1));
        return countPaths(m-1,n-1,dp);
    }
};

### TABULATION ###

long long int numberOfPaths(int m, int n){
        vector<vector<int>> dp(m,vector<int>(n,-1));
        for(int i=0;i<m;i++){
            for(int j=0;j<n;j++){
                if(i==0 && j==0) dp[i][j] = 1;
                else{
                    long long int up=0,left=0;
                    if(i>0) up = dp[i-1][j];
                    if(j>0) left = dp[i][j-1];
                    dp[i][j]=(up+left)%1000000007;
                }
            }
        }
        return dp[m-1][n-1];
    }
};

### SPACE OPTIMIZATION ###

   long long int numberOfPaths(int m, int n){
        vector<int> prev(n,-1);
        for(int i=0;i<m;i++){
            vector<int> cur(n);
            for(int j=0;j<n;j++){
                if(i==0 && j==0) cur[j] = 1;
                else{
                    long long int up=0,left=0;
                    if(i>0) up = prev[j];
                    if(j>0) left = cur[j-1];
                    cur[j]=(up+left)%1000000007;
                }
            }
            prev=cur;
        }
        return prev[n-1];
    }
