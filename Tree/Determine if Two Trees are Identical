1) Recursion - 

bool isIdentical(Node *r1, Node *r2)
{
    if(r1==NULL && r2==NULL) return true;
    if(r1!=NULL && r2!=NULL) return(r1->data==r2->data && isIdentical(r1->left,r2->left) && isIdentical(r1->right,r2->right));
    return false;
}

OR

bool isIdentical(Node *r1, Node *r2)
{
    if(r1==NULL && r2==NULL) return true;
    return (r1 && r2) && (r1->data==r2->data && isIdentical(r1->left,r2->left) && isIdentical(r1->right,r2->right));
}

2) Iterative - 

bool isIdentical(Node *r1, Node *r2)
{
    if(r1==NULL && r2==NULL) return true;
    if(r1==NUll || y==NULL) return false;
    
    stack <pair<Node*,Node*>> st;
    st.push({r1,r2});
    
    while(!st.empty()){
    
        r1=st.top().first;
        r2=st.top().second;
        
        if(r1->data!=r2->data) return false;
        
        if(r1->left && r2->left) st.push({r1->left,r2->left});
        else if(r1->left || r2->left) return false;
        
        if(r1->right && r2->right) st.push({r1->right,r2->right});
        else if(r1->right || r2->right) return false;
    }
    
    return true;
}

