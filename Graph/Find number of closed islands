//{ Driver Code Starts
//Initial Template for C++

#include<bits/stdc++.h>
using namespace std;

// } Driver Code Ends
//User function Template for C++

void dfs(int i,int j,vector<vector<int>> &grid,vector<vector<int>> &vis){
    if(i<0 || j<0 || i>=grid.size() || j>=grid[0].size())
        return;
    if(grid[i][j]==0 || vis[i][j]==1 )
        return;
    vis[i][j] = 1;
    dfs(i+1,j,grid,vis);
    dfs(i,j+1,grid,vis);
    dfs(i-1,j,grid,vis);
    dfs(i,j-1,grid,vis);
}

class Solution {
    public:
    int closedIslands(vector<vector<int>>& matrix, int N, int M) {
        vector<vector<int>> vis(N,vector<int>(M,0));
        for(int i=0;i<N;i++){
            if(matrix[i][0] == 1 && vis[i][0] ==0){
                dfs(i,0,matrix,vis);
            }
            if(matrix[i][M-1] == 1 && vis[i][M-1] ==0){
                dfs(i,M-1,matrix,vis);
            }
        }
        for(int i=0;i<M;i++){
            if(matrix[0][i] == 1 && vis[0][i] ==0){
                dfs(0,i,matrix,vis);
            }
            if(matrix[N-1][i] == 1 && vis[N-1][i] ==0){
                dfs(N-1,i,matrix,vis);
            }
        }
        int cnt=0;
        for(int i=1;i<N-1;i++){
            for(int j=1;j<M-1;j++){
                if(matrix[i][j] == 1 && vis[i][j] ==0){
                    cnt++;
                    dfs(i,j,matrix,vis);
                }  
            }
        }
        return cnt;
    }
};

//{ Driver Code Starts.
int main() {
	int t;
	cin>>t;
	while(t--)
	{
        int N, M;
        cin >> N >> M;
        vector<vector<int>>matrix(N, vector<int>(M, 0));
        for(int i=0; i<N; i++)
            for(int j=0; j<M; j++)
                cin >> matrix[i][j];
                
        Solution obj;
        int ans = obj.closedIslands(matrix, N, M);
        cout << ans << "\n";
    
cout << "~" << "\n";
}
	
	return 0;
	
}


// } Driver Code Ends
