//https://www.interviewbit.com/problems/scramble-string/

unordered_map<string,bool> mp;

bool solve(string a,string b){
    if(a.compare(b)==0) return true;
    if(a.length()<=1) return false;
    string key=a+" "+b;
    if(mp.find(key)!=mp.end()) return mp[key];
    int n=a.length();
    bool flag=false;
    for(int i=1;i<=n-1;i++){
        bool l = (mp.find(a.substr(0,i)+" "+b.substr(n-i,i))!=mp.end())? mp[a.substr(0,i)+" "+b.substr(n-i,i)]:solve(a.substr(0,i),b.substr(n-i,i));
        bool r = (mp.find(a.substr(i,n-i)+" "+b.substr(0,n-i))!=mp.end())? mp[a.substr(i,n-i)+" "+b.substr(0,n-i)]:solve(a.substr(i,n-1),b.substr(0,n-i));
        if( l && r){
            flag=true;
            break;
        };
        l = (mp.find(a.substr(0,i)+" "+b.substr(0,i))!=mp.end())? mp[a.substr(0,i)+" "+b.substr(0,i)]:solve(a.substr(0,i),b.substr(0,i));
        r = (mp.find(a.substr(i,n-i)+" "+b.substr(i,n-i))!=mp.end())? mp[a.substr(i,n-i)+" "+b.substr(i,n-i)]:solve(a.substr(i,n-1),b.substr(i,n-i));
        if( l && r){
            flag=true;
            break;
        };
    }
    return mp[key]=flag;
}

int Solution::isScramble(const string A, const string B) {
    if(A.length()!=B.length()) return 0;
    if(A.length()==0) return 1;
    if(solve(A,B)) return 1;
    return 0;
}

