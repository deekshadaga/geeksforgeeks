class Solution
{
    public:
    //Function to insert heap.
    //Max Heap
    priority_queue<int> maxHeap;
    //Min Heap
    priority_queue<int, vector<int>, greater<int>> minHeap;
    
    void insertHeap(int &x)
    {
        if(maxHeap.empty() || x<=maxHeap.top())
            maxHeap.push(x);
        else
            minHeap.push(x);
            
        balanceHeaps();
    }
    
    //Function to balance heaps.
    void balanceHeaps()
    {
        if(minHeap.size() > maxHeap.size() + 1){
            maxHeap.push(minHeap.top());
            minHeap.pop();
        }
        else if(maxHeap.size() > minHeap.size() + 1){
            minHeap.push(maxHeap.top());
            maxHeap.pop();
        }
    }
    
    //Function to return Median.
    double getMedian()
    {
        int minSize = minHeap.size();
        int maxSize = maxHeap.size();
        
        if(minSize == maxSize)
            return (minHeap.top() + maxHeap.top()) / 2.0;
        else if(minSize > maxSize)
            return minHeap.top();
        else
            return maxHeap.top();
    }
};
