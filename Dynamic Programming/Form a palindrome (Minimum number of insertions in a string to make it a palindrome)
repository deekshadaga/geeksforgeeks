int countMin(string str){
        int n= str.size();
        string s = str;
        reverse(str.begin(), str.end());
        string t = str;
        vector<vector<int>> dp(n+1,vector<int>(n+1,-1));
        for(int i=0;i<=n;i++){
            for(int j = 0;j<=n;j++){
                if(i==0 || j==0) 
                    dp[i][j] = 0;
                else if(s[i-1] == t[j-1])
                    dp[i][j] = 1 + dp[i-1][j-1];
                else
                    dp[i][j] = max(dp[i-1][j] , dp[i][j-1]);
            }
        }
        return n - dp[n][n];
    }


######################################################################################################################
class Solution{
    public:
    int countMin(string S){
        string a=S;
        reverse(S.begin(),S.end());
        string b=S;
        int n=S.length();
        int t[n+1][n+1];
        for(int i=0;i<=n;i++){
            for(int j=0;j<=n;j++){
                if(i==0 || j==0) 
                    t[i][j] = 0;
                else if(a[i-1]==b[j-1]) 
                    t[i][j] = 1+t[i-1][j-1];
                else
                    t[i][j] = max(t[i-1][j],t[i][j-1]);
            }
        }
        return n-t[n][n];
    }
};
