class Solution
{
    public:
    //Function to find the length of longest common subsequence in two strings.
    string lcs(int x, int y, string s1, string s2)
    {
        int t[x+1][y+1];
        string s="";
        for(int i=0;i<=x;i++){
            for(int j=0;j<=y;j++){
                if(i==0 || j==0) t[i][j] = 0;
            }
        }
        for(int i=1;i<=x;i++){
            for(int j=1;j<=y;j++){
                if(s1[i-1]==s2[j-1]){
                    t[i][j]=1+t[i-1][j-1];
                    s+=s1[i-1];
                }
                else t[i][j]=max(t[i-1][j],t[i][j-1]);            
            }
        }
        return s;
    }
};


OR


class Solution
{
    public:
    //Function to find the length of longest common subsequence in two strings.
    string lcs(int x, int y, string s1, string s2)
    {
        int t[x+1][y+1];
        for(int i=0;i<=x;i++){
            for(int j=0;j<=y;j++){
                if(i==0 || j==0) t[i][j] = 0;
            }
        }
        for(int i=1;i<=x;i++){
            for(int j=1;j<=y;j++){
                if(s1[i-1]==s2[j-1]) t[i][j]=1+t[i-1][j-1];
                else t[i][j]=max(t[i-1][j],t[i][j-1]);           
            }
        }
        int i=n,j=m;
        string s="";
        while(i>0 && j>0){
            if(s1[i-1]==s2[j-1]){
                s+=s1[i-1];
                i--;
                j--;
            }
            else{
                if(t[i][j-1]>t[i-1][j]){
                    j--;
                }
                else{
                    i--;
                }
            }
        }
        return reverse(s.begin(),s.end());
    }
};
